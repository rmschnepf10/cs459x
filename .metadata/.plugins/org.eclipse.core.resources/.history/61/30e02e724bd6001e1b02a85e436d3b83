package assignment3;

import java.math.BigInteger;
import java.util.Random;

public class RSAKeyGen {
	Random random = new Random();
    BigInteger one = BigInteger.ONE;
    BigInteger zero = BigInteger.ZERO;

    BigInteger p = BigInteger.probablePrime(160, random);
    BigInteger q = BigInteger.probablePrime(160, random);
    BigInteger n = p.multiply(q);
    BigInteger instancesOfn = (p.subtract(one)).multiply(p.subtract(one));

    BigInteger e = createPublicEncryptionKey();
    BigInteger d = createPrivateEncryptionKey();

    //fix this to also consider the gcd

    BigInteger createPublicEncryptionKey(){
        BigInteger o;
        do {
            o = BigInteger.probablePrime(1024, new Random());
        } while (!(one.compareTo(o) == -1) || !(o.compareTo(instancesOfn) == -1) || !(instancesOfn.gcd(o).equals(one)));

        return o;
    }

    BigInteger createPrivateEncryptionKey(){
        BigInteger o;
        do {
            o = (one.mod(instancesOfn)).divide(e);
        } while ((zero.compareTo(o) == -1) && (o.compareTo(n) == -1));

        return o;
    }

    String getPublicEncryptionKeyString(){
        return "{" + e.toString() + ", " + n.toString() + "}" ;
    }

    String getPrivateEncryptionKeyString(){
        return "{" + d.toString() + ", " + n.toString() + "}" ;
    }

    public static void main(String[] args) {
        RSAKeyGen rsaKeyGen = new RSAKeyGen();
        System.out.println(rsaKeyGen.getPrivateEncryptionKeyString());
        System.out.println(rsaKeyGen.getPublicEncryptionKeyString());
    }
}
